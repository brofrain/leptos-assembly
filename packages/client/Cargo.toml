[package]
name = "client"
version.workspace = true
edition.workspace = true
publish = false

[lib]
crate-type = ["cdylib", "rlib"]
path = "lib.rs"

[dependencies]
client-macros.workspace = true
common-macros.workspace = true
common-logger.workspace = true
common-utils.workspace = true
# full-stack
anyhow.workspace = true
cfg-if.workspace = true
derive-getters.workspace = true
derive_more.workspace = true
derive_setters.workspace = true
educe.workspace = true
futures.workspace = true
leptos.workspace = true
leptos_animated_for.workspace = true
leptos_i18n.workspace = true
leptos_meta.workspace = true
leptos_router.workspace = true
leptos-use.workspace = true
log.workspace = true
paste.workspace = true
pct-str.workspace = true
rand.workspace = true
serde.workspace = true
serde_json.workspace = true
thiserror.workspace = true
time.workspace = true
unocss-classes.workspace = true
wasm-bindgen.workspace = true
web-sys.workspace = true
# client-only
console_log = { workspace = true, optional = true }
getrandom = { workspace = true, optional = true }
# @kw remove below?
# server-only
axum = { workspace = true, optional = true }
leptos_axum = { workspace = true, optional = true }
reqwest = { workspace = true, optional = true }
tokio = { workspace = true, optional = true }
tower = { workspace = true, optional = true }
tower-http = { workspace = true, optional = true }

[features]
csr = [
  "dep:getrandom",
  "time/wasm-bindgen",
  "leptos/csr",
  "leptos_i18n/csr",
  "leptos_meta/csr",
  "leptos_router/csr",
]
ssr = [
  "leptos/ssr",
  "leptos_animated_for/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
  "leptos_i18n/axum",
]

[package.metadata.cargo-all-features]
skip_feature_sets = [
  ["csr", "ssr"],
  ["_client-deps", "_server-deps"],
  ["client", "server"],
]
